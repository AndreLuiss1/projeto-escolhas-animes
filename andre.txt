#include <stdio.h>
#include <stdlib.h>

#define TAM_TABELA 100

// estrutura de um nó da lista encadeada
typedef struct No {
    int chave;
    int valor;
    struct No* proximo;
} No;

// estrutura da tabela hash
typedef struct TabelaHash {
    No** tabela;
} TabelaHash;

// função para criar um novo nó da lista encadeada
No* novo_no(int chave, int valor) {
    No* no = (No*) malloc(sizeof(No));
    no->chave = chave;
    no->valor = valor;
    no->proximo = NULL;
    return no;
}

// função para criar uma nova tabela hash
TabelaHash* nova_tabela_hash() {
    TabelaHash* th = (TabelaHash*) malloc(sizeof(TabelaHash));
    th->tabela = (No**) calloc(TAM_TABELA, sizeof(No*));
    return th;
}

// função para obter o índice da tabela hash a partir de uma chave
int funcao_hash(int chave) {
    return chave % TAM_TABELA;
}

// função para inserir um elemento na tabela hash
void inserir_na_tabela_hash(TabelaHash* th, int chave, int valor) {
    int indice = funcao_hash(chave);
    No* cabeca = th->tabela[indice];

    // verifica se já existe um nó com a mesma chave
    while (cabeca != NULL) {
        if (cabeca->chave == chave) {
            cabeca->valor = valor;
            return;
        }
        cabeca = cabeca->proximo;
    }

    // cria um novo nó e adiciona na lista encadeada
    No* novo = novo_no(chave, valor);
    novo->proximo = th->tabela[indice];
    th->tabela[indice] = novo;
}

// função para buscar um elemento na tabela hash
int buscar_na_tabela_hash(TabelaHash* th, int chave) {
    int indice = funcao_hash(chave);
    No* cabeca = th->tabela[indice];

    // percorre a lista encadeada procurando pelo nó com a chave desejada
    while (cabeca != NULL) {
        if (cabeca->chave == chave) {
            return cabeca->valor;
        }
        cabeca = cabeca->proximo;
    }

    // se não encontrou nenhum nó com a chave desejada, retorna -1
    return -1;
}

// função para remover um elemento da tabela hash
void remover_da_tabela_hash(TabelaHash* th, int chave) {
    int indice = funcao_hash(chave);
    No* cabeca = th->tabela[indice];
    No* anterior = NULL;

    // percorre a lista encadeada procurando pelo nó com a chave desejada
    while (cabeca != NULL) {
        if (cabeca->chave == chave) {
            // remove o nó da lista encadeada
            if (anterior == NULL) {
                th->tabela[indice] = cabeca->proximo;
            } else {
                anterior->proximo = cabeca->proximo;
            }
            free(cabeca);
            return;
        }
        anterior = cabeca;
        cabeca = cabeca->proximo;
    }
}